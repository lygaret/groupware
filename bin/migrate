#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../config/system"
require "optparse"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: migrate [options]"

  opts.on("-t", "--target INTEGER", Integer, "the target version of the database") do |v|
    options[:target] = v
  end

  opts.on("-d", "--dump PATH", String, "a path to put a schema dump after migration") do |p|
    options[:dump] = p
  end
end.parse!

# because we need specific database setup,
# we can't use the `sequel -m` cli for migrations

System::Container.prepare :database

# customize sequel for our migrations
# we don't include all these extensions in the normal provider for least-privs reasons

Sequel.extension :migration
Sequel.extension :sqlfile
migrations = System::Container.root.join "config/migrations"

Sequel::Database.extension :sqlfile
Sequel.sqlfile_roots << migrations

# now back to your regularly scheduled programming

System::Container.start :database
connection = System::Container["db.connection"]

mopts    = { allow_missing_migration_files: true, use_transactions: true }
migrator = Sequel::IntegerMigrator.new(connection, migrations, target: options[:target], **mopts)
migrator.run

if options[:dump]
  path = File.expand_path options[:dump]
  File.open(path, "w") do |file|
    version = migrator.send(:current_migration_version)

    file.puts "-- #{Time.now.httpdate} -- Migration Version #{version}"
    file.puts

    tables = connection[:sqlite_master]
               .exclude(sql: nil)
               .select(:sql, :type, :tbl_name, :name)
               .to_hash_groups(:tbl_name)

    tables.each do |(_, objects)|
      objects.each do |object|
        file.puts "#{object[:sql]};"
      end
      file.puts
    end
  end
end
